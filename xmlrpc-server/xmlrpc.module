<?php
/**
 * @file
 * Example of XML-RPC.
 */

/**
 * Implementation of hook_xmlrpc().
 * Maps external names of XML-RPC methods to callback functions.
 */


module_load_include('inc', 'labdoo_nodes', 'labdoo');
 


function labdoo_xmlrpc() {
 $methods[] = array(
  'remoteHello.hello',
  // External method name.
  'xmls_remotehello_hello', // PHP function to run.
  array('string', 'string'), // The return value's type,
  // then any parameter types.
  t('Greets XML-RPC clients by name.') // Description.
  );

  $methods[] = array(
    'labdoo.addLaptop',
  // External method name.
    'xmls_laptop_add', // PHP function to run.
  array('string', 'struct'), // The function input and output params
  // then any parameter types.
  t('Adding new laptop.') // Description.
  );

  $methods[] = array(
    'labdoo.delLaptop',
  // External method name.
    'xmls_laptop_delete', // PHP function to run.
  array('boolean', 'string'), // The function input and output params
  // then any parameter types.
  t('Delete a laptop.') // Description.
  );
  


  $methods[] = array(
    'labdoo.updateLaptop',
  // External method name.
    'xmls_laptop_update', // PHP function to run.
  array('boolean', 'struct'), // The function input and output params
  // then any parameter types.
  t('Update a laptop.') // Description.
  );

  $methods[] = array(
    'labdoo.getLaptop',
  // External method name.
    'xmls_laptop_get', // PHP function to run.
  array('struct', 'string'), // The function input and output params
  // then any parameter types.
  t('Get a laptop.') // Description.
  );



  return $methods;
  }
  

  function xmls_remotehello_hello($name) {
  	if (!checkAPIKEY(getAPIKEY())) { return xmlrpc_error(2, t('The API KEY parameter is incorrect')); }  		
  	if (!$name) { return xmlrpc_error(1, t('I cannot greet you by name if you do not provide one.')); }
  	return t('Hello, @name!', array('@name' => $name));
  }
  
  function xmls_laptop_add($args) {
	if (!checkAPIKEY(getAPIKEY())) { return xmlrpc_error(2, t('The API KEY parameter is incorrect')); } 		
  	return save_laptop ($args);
  }


 function xmls_laptop_delete($nid) {
 	if (!checkAPIKEY(getAPIKEY())) { return xmlrpc_error(2, t('The API KEY parameter is incorrect')); }	
	return delete_laptop ($nid);
  }

 function xmls_laptop_update($args) {
 	if (!checkAPIKEY(getAPIKEY())) { return xmlrpc_error(2, t('The API KEY parameter is incorrect'));}		
	return update_laptop($args);
}


 function xmls_laptop_get($nid) {
	if (!checkAPIKEY(getAPIKEY())) { return xmlrpc_error(2, t('The API KEY parameter is incorrect'));}
	return load_laptop($nid);

 }

function getAPIKEY(){
	
	$exploded = array();
	parse_str($_SERVER['QUERY_STRING'], $exploded);
	//watchdog('workflow', 'Request %request', array('%request' =>  $exploded["APIKEY"], WATCHDOG_ERROR));
	return  $exploded["APIKEY"];

}

function checkAPIKEY($apikey) {
		/** checkers to avoid unnecessary database calls **/
	
	if ($apikey == "" or strlen($apikey) != 32) return False;
	
	$countRows = db_result(db_query('SELECT COUNT(*) FROM api_key where key_generated like \'%s\'',$apikey));
	if ($countRows == 1) {
		return True;
	} else if ($countsRows == 0){
		return False;		
	} else {
		drupal_set_message(t("It was an error, the database is not wellformed: number of results for your query: @result",array("@result"=> $apikey)));
		return False;
	}
	
}

  







